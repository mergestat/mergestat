version: "3.6"

volumes:
  db_data:
  # grafana_lib:
  # grafana_etc:
  # grafana_log:

services:
  postgres:
    image: postgres:14
    restart: always
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}

  worker:
    # NOTE: to opt out of basic image pull tracking, comment out the current image
    # and uncomment the next line (which will pull from Docker Hub directly).
    # image: mergestat/worker:2.2.1-beta
    image: images.mergestat.com/mergestat/worker:2.2.1-beta
    privileged: true
    stop_grace_period: 10m
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_CONNECTION: postgres://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/postgres?sslmode=disable
      CONCURRENCY: 5
      GITHUB_RATE_LIMIT: 1/2
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET:-password}
      LOG_LEVEL: debug
      DEBUG: 1
      PRETTY_LOGS: 1
      GITHUB_WORKFLOW_PER_PAGE: 30
      GITHUB_WORKFLOW_RUNS_PER_PAGE: 30
      GITHUB_WORKFLOW_JOBS_PER_PAGE: 30
    ports:
      - 3301:8080
    # NOTE: Uncomment the following to mount a path on disk to the container to access local git repos.
    # When adding a the repo in the UI, use file:///projects/<repo-name> to access the repo.
    # volumes:
    #   - ~/projects:/projects

  graphql:
    # See NOTE above in worker service.
    # image: mergestat/graphql:2.2.1-beta
    image: images.mergestat.com/mergestat/graphql:2.2.1-beta
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      worker:
        # this is to ensure all migrations are run before the API starts up
        condition: service_healthy
    ports:
      - 5433:5433
    command:
      - "--connection"
      - "postgres://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/postgres?sslmode=disable"
      - "--port"
      - "5433"
      - "--schema"
      - "mergestat,sqlq,public"
      - "--append-plugins"
      - "@graphile-contrib/pg-simplify-inflector,postgraphile-plugin-connection-filter,/graphql/container-sync-jobs/index.js,/graphql/exec-sql/index.js,/graphql/service-credentials/index.js"
      - "-o"
      - "--subscriptions"
      - "--retry-on-init-fail"
      - "--dynamic-json"
      - "--no-setof-functions-contain-nulls"
      - "--no-ignore-rbac"
      - "--extended-errors=errcode"
      - "--disable-graphiql"
      - "--enable-query-batching"
      - "--disable-query-log"
      - "--legacy-relations=omit"
      - "--jwt-secret=${JWT_SECRET:-secret}"
      - "--default-role=mergestat_anonymous"
    environment:
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET:-password}
      DISPLAY_PG_HOSTNAME: localhost
      DISPLAY_PG_PORT: 5432
      DISPLAY_PG_DATABASE: postgres
      DISPLAY_PG_USER: postgres

  ui:
    # See NOTE above in worker service.
    # image: mergestat/console:2.2.1-beta
    image: images.mergestat.com/mergestat/console:2.2.1-beta
    restart: always
    depends_on:
      - graphql
    ports:
      - 3300:3000
    environment:
      POSTGRAPHILE_API: http://graphql:5433/graphql
      POSTGRES_CONNECTION: postgres://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/postgres?sslmode=disable
      JWT_SECRET: ${JWT_SECRET:-secret} # should match - "--jwt-secret=secret" flag in graphql service
      INSECURE_SESSION_COOKIE: 1
    labels:
      shipyard.route: '/'

  # grafana:
  #   image: grafana/grafana-oss:latest
  #   user: root
  #   environment:
  #     PGHOST: postgres
  #     PGUSER: postgres
  #     PGPASSWORD: ${POSTGRES_PASSWORD:-password}
  #     PGDATABASE: postgres
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - postgres
  #   restart: always
  #   volumes:
  #     - grafana_lib:/var/lib/grafana
  #     - grafana_etc:/etc/grafana
  #     - grafana_log:/var/log/grafana
  #     - ./scripts/grafana/grafana.ini:/etc/grafana/grafana.ini
  #     - ./scripts/grafana/provisioning:/etc/grafana/provisioning
  #     - ./examples:/var/lib/examples
  #     - /var/lib/grafana/dashboards/
  #   entrypoint: [ "bash" ]
  #   command: > # This is to set the datasource id in the examples to the datasource created for local grafana
  #     -cx 'cp -r /var/lib/examples/* /var/lib/grafana/dashboards/ && find /var/lib/grafana/dashboards/ -name ''*.json'' | xargs grep -rnl "$${DS_POSTGRES}" | xargs -i@ sed -i "s/\$${DS_POSTGRES}/SXQZgpP7z/g" @ && exec grafana-server --config="/etc/grafana/grafana.ini"'
